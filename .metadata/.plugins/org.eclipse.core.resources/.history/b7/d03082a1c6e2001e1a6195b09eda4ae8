/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "HSCR04.h"
#include "DHT11.h"
#include "stdio.h"
#include "rgb.h"
#include "MPU6050.h"
#include "ring_buffer.h"
#include "stdio.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
uint16_t center_ultra();
#define TRIG_PIN GPIO_PIN_11
#define TRIG_PORT GPIOA
#define ECHO_PIN GPIO_PIN_12
#define ECHO_PORT GPIOA


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */


DHT_DataTypedef DHT11_DATA;
float temperature;
Mpu6050_Data IMU_Data;

uint16_t right_ultrasonic_data, centre_ultrasonic_data, left_ultrasonic_data;


uint8_t rx_frame[25], rx_print_frame[25];
uint8_t tx_frame[22]={0xF7, 0xF6, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8};
uint8_t rec_flag=0, packetType=0;
int frame_length=0;

uint16_t PSN=0;
uint8_t PSN_INDEX;
uint8_t rgb_flag;
char string[50];
int left_forward_pulse_count, left_reverse_pulse_count, right_forward_pulse_count, right_reverse_pulse_count;
int left_forward_turns, left_reverse_turns, right_forward_turns, right_reverse_turns, right_ticks, left_ticks;
uint8_t left_state, left_PrevState = 0, right_state, right_PrevState = 0;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

Frame_Status validate_frame(uint8_t *frame);
void sendResponse(uint8_t *frame, uint8_t resp_type);
void ResponseCallBack(uint8_t *frame);
uint8_t GetUltrasonicData(uint8_t SensorID);
uint8_t GetBMM150MagnetoMeterData(void);
uint8_t GetTemperatureData(void);
uint8_t GetOdometerData(void);
uint8_t GetIMUData(void);
uint8_t GetProximityData(void);
uint8_t GetHallSensorData(void);
uint8_t GetDoorSensorData(void);
uint8_t GetWheelEncoderData(void);
uint8_t GetRainSensorData(void);
uint8_t GetBuzzerData(void);
uint8_t GetFanData(void);
uint8_t GetLimitSwitchData(void);
uint8_t GetLEDStripData(void);
uint8_t GetRelayData(void);

void LeftMotor_forward ();
void LeftMotor_reverse ();
void RightMotor_forward ();
void RightMotor_reverse ();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
uint8_t data_1[] = "For\r";
uint8_t data_2[] = "Rev\r";

#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}



int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  PSN=0;
  left_forward_pulse_count=0, left_reverse_pulse_count=0,right_forward_pulse_count=0,right_reverse_pulse_count=0;
  left_forward_turns=0, left_reverse_turns=0, right_forward_turns=0,right_reverse_turns=0;
  left_ticks=0,right_ticks=0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_I2C2_Init();
  /* USER CODE BEGIN 2 */


  Ringbuf_init();

  /* RGB */
  Set_Brightness(10);
  Set_RGB_Red();

  MPU6050_Init();

  /*	Ultrasonic */
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
   HAL_Delay(300);
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
   HAL_TIM_Base_Start(&htim1);
   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);

  /* Pi console and Debug console test*/
  HAL_UART_Transmit_IT(&huart1, "Debug console is ready", sizeof("Debug console is ready"));
  //printf("Pi Console is ready");
 HAL_UART_Transmit_IT(&huart2, "Pi console is ready", sizeof("Pi console is ready"));


  /* 100ms timer */
  HAL_TIM_Base_Start_IT(&htim3);

  /* Motor PWM Motor */
  HAL_TIM_Base_Start(&htim2);
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);

  // Reset Motor PWM at the begining
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);

  Set_RGB_Yellow();
  //HAL_UART_Receive_IT(&huart2, rx_frame, 15);

  //** MPU Test Prints *//
  //MPU6050_Read_Accel(&IMU_Data);
  //HAL_Delay(100);
  //MPU6050_Read_Gyro(&IMU_Data);
  //HAL_Delay(1000);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/*
		 * Below are all the test prints for sensors
		 */

		/* Wheel encoder prints */

//		if(left_forward_turns>=left_reverse_turns)
//			left_ticks = left_forward_turns - left_reverse_turns;
//		else
//			left_ticks = left_reverse_turns - left_forward_turns;
//
//		if(right_forward_turns >= right_reverse_turns)
//			right_ticks = right_forward_turns - right_reverse_turns;
//		else
//			right_ticks = right_reverse_turns - right_forward_turns;

//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "left:forward pulse count:%d\n",left_forward_pulse_count),10);
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "left:reverse pulse count:%d\n",left_reverse_pulse_count),10);
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "right:forward pulse count:%d\n",right_forward_pulse_count),10);
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "right:reverse pulse count:%d\n",right_reverse_pulse_count),10);

//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Left Ticks:%d\n",left_ticks),10);
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Right Ticks:%d\n",right_ticks),10);

//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Left forward turns:%d\n",left_forward_turns),10);
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Left reverse turns:%d\n",left_reverse_turns),10);
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Right forward turns:%d\n",right_forward_turns),10);
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Right reverse turns:%d\n",right_reverse_turns),10);

		/*
		 * Ultrasonic Test Codes
		 */
//
//		left_ultrasonic_data = Left_ultra();
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Left Ultrasonic Data:%d\n",left_ultrasonic_data), 100);
//		HAL_Delay(100);
//////
//		right_ultrasonic_data = right_ultra();
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Right Ultrasonic Data:%d\n",right_ultrasonic_data), 100);
//		HAL_Delay(100);
//
//		centre_ultrasonic_data = center_ultra();
//		HAL_UART_Transmit(&huart1, (uint8_t *)string, sprintf(string, "Centre Ultrasonic Data:%d\n",centre_ultrasonic_data), 100);
//		HAL_Delay(100);




		while(IsDataAvailable()){

		rx_frame[frame_length]=Uart_read();
		rx_print_frame[frame_length]=rx_frame[frame_length];
		if(rx_frame[10]==0x10)
		{
			right_ticks=0;
			left_ticks=0;
		}
		if (rx_frame[6]==0x10)
		{
			// Reseting the wheel encoder data
		left_forward_pulse_count, left_reverse_pulse_count, right_forward_pulse_count, right_reverse_pulse_count=0;
		left_forward_turns, left_reverse_turns, right_forward_turns, right_reverse_turns, right_ticks, left_ticks=0;
		}
		if(rx_frame[frame_length] == 0xF8)
		{
			// Print the received data from Pi
//			 HAL_UART_Transmit_IT(&huart1, rx_print_frame, (frame_length+1));
//			 HAL_Delay(7);

			// Storing packet type for further processing
			packetType = rx_frame[4];

			// Validate Frame
			uint8_t frameStatus=validate_frame(rx_frame);

			//sendResponse(rx_frame, frameStatus);
		    if((frameStatus==Frame_Success) && (packetType==CMD))
			{

		    	ResponseCallBack(rx_frame);
				//sendResponse(rx_frame, RESP);
			}

			frame_length=0;
		}
		else
		{
			frame_length++;
		}
		}
//				// Start ADC conversion
//					  	      HAL_ADC_Start(&hadc1);
//
//					  	      // Wait for ADC conversion to complete
//					  	      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
//					  	          // ADC conversion error
//					  	          continue; // Skip this iteration and try again
//					  	      }
//
//					  	      // Read ADC value
//					  	      uint16_t sensorValue = HAL_ADC_GetValue(&hadc1);
//
//					  	      // Calculate voltage
//					  	      float voltage = (float)sensorValue / 4095 * 22.0f;
//
//					  	      // Calculate battery percentage
//					  	      float pct = ((voltage - 2.8f) / 19.2f) * 100.0f; // Assuming 1.2V as minimum voltage and 20.8V as voltage range (22.0V - 1.2V)
//
//					  	      // Check if the voltage has changed significantly
//				//	  	      static float lastVoltage = 0.0f;
//				//	  	      if (fabs(voltage - lastVoltage) >= 0.1f) { // Adjust the threshold as needed
//				//	  	          // Update last voltage
//				//	  	          lastVoltage = voltage;
//
//					  	          // Print percentage
//					  	        char msg[50];
//					  	        sprintf(msg, "Battery Percentage: %.2f%%\n", pct);
//					  	          //sprintf(msg, "Voltage: %.2f V, Percentage: %.2f %%\r\n", voltage, pct);
//					  	        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
//				//	  	      }
//
//					  	      // Delay before next iteration
//					  	      HAL_Delay(1000); // Adjust the delay as needed
		      float R1 = 30000.0;
			  float R2 = 4664.0;
			  HAL_ADC_Start(&hadc1);

			  // Wait for ADC conversion to complete
			  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
			      // ADC conversion error
			      continue; // Skip this iteration and try again
			  }

			  // Read ADC value
			  uint16_t sensorValue = HAL_ADC_GetValue(&hadc1);

			  // Calculate voltage using voltage divider circuit
			  // Assuming Vref = 3.3V
			  float voltage = (float)sensorValue * (3.28f / 4095.0f); // Convert ADC value to voltage

			  // Calculate actual battery voltage using voltage divider formula
			  // Vbattery = Vadc * (R1 + R2) / R2
			  float actualBatteryVoltage = voltage * ((R1 + R2) / R2);
			  // Calculate battery percentage within the range of 1.2V to 20.8V
			  float minVoltage = 20.50f;
			  float maxVoltage =22.11f;
			  float pct;
			  if (actualBatteryVoltage <= minVoltage) {
			      pct = 0.0f;
			  } else if (actualBatteryVoltage >= maxVoltage) {
			      pct = 100.0f;
			  } else {
			      pct = ((actualBatteryVoltage - minVoltage) / (maxVoltage - minVoltage)) * 100.0f;
			  }
			  // Store the percentages in an array
			      static float percentages[3] = {0}; // Array to store three percentages
			      static uint8_t index = 0; // Index to keep track of the current reading


			      percentages[index] = pct; // Store the current percentage
			      index = (index + 1)%5; // Increment index


			      // Calculate the average percentage
			      float sum = 0.0f;
			      for (int i = 0; i < 5; i++) {
			          sum += percentages[i];
			      }
			      float avgPercentage = sum / 5.0f;
			      // Calculate the average percentage
			      //int avgPercentage = (percentages[0] + percentages[1] + percentages[2]) / 3;
			  // Print voltage and percentage
			  char msg[100];
			  //sprintf(msg, "Measured Voltage: %.2f V, Actual Battery Voltage: %.2f V, Battery Percentage: %.2f%%\n", voltage, actualBatteryVoltage, pct);
		      //sprintf(msg, "Percentage: %d %%\r\n", avgPercentage);
			  sprintf(msg, "Percentage: %.1f %%\r\n",avgPercentage);
			  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
			  sprintf(msg, "Actual Battery Voltage: %.2f V\r\n", actualBatteryVoltage);
			  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);

			  // Delay before next iteration
			  HAL_Delay(2000); // Adjust the delay as needed
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{


	//rainbow_effect_left();
	//HAL_UART_Transmit_IT(&huart2, "1000", sizeof("1000"));
	//HAL_UART_Transmit(&huart2, 10, 22,25);

	tx_frame[14]=tx_frame[13]=tx_frame[15]=tx_frame[16]=tx_frame[17]=tx_frame[18]=0x00;


	//test dummy data://
	//centre_ultrasonic_data =0x9B98;
/*	centre_ultrasonic_data = center_ultra();
	tx_frame[12] = (uint8_t) (centre_ultrasonic_data & 0x00FF);
	tx_frame[11] = (uint8_t) ((centre_ultrasonic_data & 0xFF00)>>8);
	tx_frame[5]  = 0x01;
	tx_frame[6]  = 0x01;

	//HAL_UART_Transmit(&huart2, tx_frame, 22,25);
	//HAL_Delay(7);


	//test dummy data://
	//right_ultrasonic_data =0x9B98;
	right_ultrasonic_data = right_ultra();
	tx_frame[12] = (uint8_t) (right_ultrasonic_data & 0x00FF);
	tx_frame[11] = (uint8_t) ((right_ultrasonic_data & 0xFF00)>>8);
	tx_frame[6]  = 0x02;

	//HAL_UART_Transmit(&huart2, tx_frame, 22,25);
	//HAL_Delay(7);

	//test dummy data:
	//left_ultrasonic_data = 0x9B97;
	left_ultrasonic_data = Left_ultra();
	tx_frame[12] = (uint8_t) (left_ultrasonic_data & 0x00FF);
	tx_frame[11] = (uint8_t) ((left_ultrasonic_data & 0xFF00)>>8);
	tx_frame[6]  = 0x03;

	//HAL_UART_Transmit(&huart2, tx_frame, 22,25);
	//HAL_Delay(7);
*/


	tx_frame[11]=0;
	tx_frame[15]=0;
	tx_frame[12]=tx_frame[13]=tx_frame[14]=tx_frame[16]=tx_frame[17]=tx_frame[18]=0;

	// Update sensor type and ID
	tx_frame[5]  = 0x02;
	tx_frame[6]  = 0x00;

	if(left_forward_turns>=left_reverse_turns)
	{
		tx_frame[15] = 0x0;
		left_ticks = left_forward_turns - left_reverse_turns;

	}
	else
	{
		tx_frame[15] = 0x1;
		left_ticks = left_reverse_turns - left_forward_turns;

	}


	if(right_forward_turns >= right_reverse_turns)
	{
		tx_frame[11] = 0x0;
		right_ticks = right_forward_turns - right_reverse_turns;

	}
	else
	{
		tx_frame[11] = 0x1;
		right_ticks = right_reverse_turns - right_forward_turns;

	}


	/*tx_frame[14] = (uint8_t) (right_ticks & 0x000000FF);
	tx_frame[13] = (uint8_t) ((right_ticks & 0x0000FF00)>>8);
	tx_frame[12] = (uint8_t) ((right_ticks & 0x00FF0000)>>16);

	tx_frame[18] = (uint8_t) (left_ticks & 0x000000FF);
	tx_frame[17] = (uint8_t) ((left_ticks & 0x0000FF00)>>8);
	tx_frame[16] = (uint8_t) ((left_ticks & 0x00FF0000)>>16);*/
//char buffer[16];
	//int i = 15;
	//left_ticks=50;
	//right_ticks=30;
	//printf("Hi");
	HAL_Delay(10);
 // uint8_t wheelEncoder[]={right_forward_turns,right_reverse_turns,left_forward_turns,left_reverse_turns};
 // HAL_UART_Transmit (&huart2, wheelEncoder, sizeof (wheelEncoder), HAL_MAX_DELAY);

  	  	  //int data[] = {right_forward_turns, right_reverse_turns, left_forward_turns, left_reverse_turns};
			int data[] = {right_forward_pulse_count, right_reverse_pulse_count, left_forward_pulse_count, left_reverse_pulse_count};
  	      char buffer[50];  // Adjust the buffer size accordingly

  	      // Convert integers to string
  	      //int len = sprintf(buffer, "%d,%d,%d,%d\n", data[0], data[1], data[2], data[3]);
			int len = sprintf(buffer, "%d,%d,%d,%d\n", data[0], data[1], data[2], data[3]);
  	      // Send data over UART
  	      HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);

  //HAL_UART_Transmit_IT(&huart2, "Right_Wheel_Forward_turn\n", sizeof("Right_Wheel_Forward_turn\n"));
  //	HAL_UART_Transmit (&huart2, data_1, sizeof (data_1), 10);
	//HAL_Delay(1);
//	uint8_t data[] = "RIGHT_WHEEL_FORWARD \r\n";
//
//	HAL_UART_Transmit (&huart2, data, sizeof (data), 10);
	//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n", right_forward_turns), 500);
//	HAL_Delay(3);
	//HAL_UART_Transmit_IT(&huart2, "Right_Wheel_Reverse_turn\n", sizeof("Right_Wheel_Reverse_turn\n"));
//	HAL_UART_Transmit (&huart2, data_2, sizeof (data_2), 10);
//	uint8_t data2[] = "RIGHT_WHEEL_REVERSE \r\n";
//
//	HAL_UART_Transmit (&huart2, data2, sizeof (data2), 10);
	//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", right_reverse_turns), 500);
//	HAL_Delay(3);
//
//
//	uint8_t data3[] = "LEFT_WHEEL_FORWARD \r\n";
//
//	HAL_UART_Transmit (&huart2, data3, sizeof (data3), 10);
	//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", left_forward_turns), 500);
//	HAL_Delay(3);
//	//HAL_UART_Transmit_IT(&huart2, "Left_Wheel_Reverse_turn\n", sizeof("Left_Wheel_Reverse_turn\n"));
//	uint8_t data4[] = "LEFT_WHEEL_REVERSE \r\n";
//
//	HAL_UART_Transmit (&huart2, data4, sizeof (data4), 10);
//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", left_reverse_turns), 500);
	/*While run on main application we need to change the right forward pulse count and right_reverse_pulse count to right and left ticks*/
	//HAL_UART_Transmit_IT(&huart1, "Narsi\r\n", sizeof("Narsi\r\n"));
	//HAL_UART_Transmit(&huart2, 1000, 1,25);
	HAL_Delay(3);

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//HAL_UART_Transmit(&huart1, "Debug int console ", sizeof("Debug int console "),10);

	if (GPIO_Pin == Right_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA,Right_WE_Pin_B_Pin) == GPIO_PIN_RESET)
	{
		right_forward_pulse_count++;

//		if(right_forward_pulse_count>=420)
//		{
//			right_forward_turns++;
//			right_forward_pulse_count=0;
//		}

//	if (right_forward_pulse_count>=420)
//	{
//		right_forward_pulse_count=0;
//		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//	}

	}
	else if(GPIO_Pin == Right_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Right_WE_Pin_A_Pin) == GPIO_PIN_SET)
	{

	}
	else if(GPIO_Pin == Right_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Right_WE_Pin_A_Pin) == GPIO_PIN_RESET)
	{
		right_reverse_pulse_count++;

//		if(right_reverse_pulse_count>=420)
//		{
//				right_reverse_turns++;
//				right_reverse_pulse_count=0;
//		}

//		if (right_reverse_pulse_count>=2100)
//		{
//			right_reverse_pulse_count=0;
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//		}
	}
	else if(GPIO_Pin == Right_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA, Right_WE_Pin_B_Pin) == GPIO_PIN_SET)
	{

	}
	else if(GPIO_Pin == Left_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_B_Pin) == GPIO_PIN_SET)
	{
		left_forward_pulse_count++;
//		if (left_forward_pulse_count >= 420)
//		{
//			left_forward_turns++;
//			left_forward_pulse_count=0;
//		}

//		if(left_forward_pulse_count>=2100)
//		{
//			left_forward_pulse_count=0;
//				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//		}

	}
	else if(GPIO_Pin == Left_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_A_Pin) == GPIO_PIN_RESET)
	{

	}
	else if(GPIO_Pin == Left_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_A_Pin) == GPIO_PIN_SET)
	{
		left_reverse_pulse_count++;

//		if(left_reverse_pulse_count >= 420)
//		{
//			left_reverse_turns++;
//			left_reverse_pulse_count=0;
//		}
//		if(left_reverse_pulse_count>=2100)
//		{
//			left_reverse_pulse_count=0;
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//		}
	}
	else if(GPIO_Pin == Left_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_B_Pin) == GPIO_PIN_RESET)
	{

	}

//	switch(GPIO_Pin)
//	{
//		case Right_WE_Pin_A_Pin:
//			if(HAL_GPIO_ReadPin(GPIOA,Right_WE_Pin_B_Pin) == GPIO_PIN_RESET)
//			{
//				right_forward_pulse_count++;
//			}
//	}
}

void sendResponse(uint8_t *frame, uint8_t frame_type)
{
	PSN++;
	frame[2] = (uint8_t)(PSN & 0xFF00);
	frame[3] = (uint8_t)(PSN & 0x00FF);

	frame[4] = frame_type;
	//HAL_UART_Transmit_IT(&huart2, frame, 15);
}

Frame_Status validate_frame(uint8_t frame[])
{
	//HAL_UART_Transmit(&huart1, "debug:amInValidate", sizeof("debug:amInValidate"),100);
	int i=1;
	switch(i)
	{
		case 1:
			if(frame[0]==0xF6)
				i++;
			else
				return Invalid_frame;
		case 2:
			if(frame[1]==0xF7)
				i++;
			else
				return Invalid_frame;
		case 3:
			if(frame[4]==0xF0 || frame[4]== 0xF2 || frame[4]==0xF3)
				i++;
			else
				return Invalid_Packet_Type;
		case 4:
			if(frame[5]>=0 && frame[5]<=0x0F)
				i++;
			else
				return Invalid_Sensor_Type;
		case 5:
			if(frame[6]>=0 && frame[6]<=0x04)
				i++;
			else
				return Invalid_Sensor_ID;
		case 6:
			if(frame[7]>=0 && frame[7]<=0x0F)
				i++;
			else
				return Invalid_Function_ID;
		case 7:
			if(frame[14]==0xF8)
				return Frame_Success;
			else
				return Invalid_frame;
	}
}

/*
CRC_Check()
{

}
*/

void ResponseCallBack(uint8_t *frame)
{
	switch(frame[5])
	{
	case 1:
		rx_frame[10]=GetUltrasonicData(frame[6]);
		break;
	case 2:
		rx_frame[10]=GetBMM150MagnetoMeterData();
		break;
	case 3:
		rx_frame[10]=GetTemperatureData();
		break;
	case 4:
		rx_frame[10]=GetIMUData();
		break;
	case 5:
		rx_frame[10]=GetProximityData();
		break;
	case 6:
		rx_frame[10]=GetWheelEncoderData();
		break;
	case 7:
		rx_frame[10]=GetLimitSwitchData();
		break;
	case 8:
	{
		if (frame[6]==0x00)
		{
			HAL_TIM_Base_Stop_IT(&htim3);
		}
		else if (frame[6]==0x01)
			HAL_TIM_Base_Start_IT(&htim3);
		break;
	}
	case 9:
	{
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)"hellom",6);
		uint8_t left_dir = frame[10]&0x80;
		uint8_t right_dir = frame[11]&0x80;


		uint8_t left_pwm = frame[10]&0x7F;
		uint8_t right_pwm = frame[11]&0x7F;


		if (left_dir==0x80)
			LeftMotor_reverse();
		else
			LeftMotor_forward();
		if (right_dir==0x80)
			RightMotor_reverse();
		else
			RightMotor_forward();

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,left_pwm);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,right_pwm);


		if(rgb_flag)
		{
		Set_RGB_Green();
		rgb_flag=0;
		}
		else{
			Set_RGB_Yellow();
			rgb_flag=1;
		}

		rx_frame[10]=Frame_Success;
		break;
	}
	}
}



uint8_t GetUltrasonicData(uint8_t sensorID)
{
	switch(sensorID)
	{
	case 1:
		return 101;
	case 2:
		return 102;
	case 3:
		return 103;
	case 4:
		return 104;
	}
}

uint8_t GetBMM150MagnetoMeterData()
{
	return 105;
}

uint8_t GetTemperatureData()
{
	return 106;
}


uint8_t GetIMUData()
{
	return 108;
}

uint8_t GetProximityData()
{
	return 109;
}


uint8_t GetWheelEncoderData()
{
	return 112;
}


uint8_t GetLimitSwitchData()
{
	return 116;
}

uint8_t GetLEDStripData()
{
	return 117;
}

void LeftMotor_forward()
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
}
void LeftMotor_reverse()
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
}
void RightMotor_forward()
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
}
void RightMotor_reverse ()
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}

#endif /* USE_FULL_ASSERT */
